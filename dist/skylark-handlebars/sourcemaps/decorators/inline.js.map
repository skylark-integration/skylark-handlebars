{"version":3,"sources":["decorators/inline.js"],"names":["define","utils","instance","registerDecorator","fn","props","container","options","ret","partials","context","original","extend","args"],"mappings":";;;;;;;AAAAA,QAAQ,YAAa,SAAUC,GAC3B,aACA,OAAO,SAAUC,GACbA,EAASC,kBAAkB,SAAU,SAAUC,EAAIC,EAAOC,EAAWC,GACjE,IAAIC,EAAMJ,EAYV,OAXKC,EAAMI,WACPJ,EAAMI,YACND,EAAM,SAAUE,EAASH,GACrB,IAAII,EAAWL,EAAUG,SACzBH,EAAUG,SAAWR,EAAMW,UAAWD,EAAUN,EAAMI,UACtD,IAAID,EAAMJ,EAAGM,EAASH,GAEtB,OADAD,EAAUG,SAAWE,EACdH,IAGfH,EAAMI,SAASF,EAAQM,KAAK,IAAMN,EAAQH,GACnCI","file":"../../decorators/inline.js","sourcesContent":["define(['../utils'], function (utils) {\n    'use strict';\n    return function (instance) {\n        instance.registerDecorator('inline', function (fn, props, container, options) {\n            let ret = fn;\n            if (!props.partials) {\n                props.partials = {};\n                ret = function (context, options) {\n                    let original = container.partials;\n                    container.partials = utils.extend({}, original, props.partials);\n                    let ret = fn(context, options);\n                    container.partials = original;\n                    return ret;\n                };\n            }\n            props.partials[options.args[0]] = options.fn;\n            return ret;\n        });\n    };\n});"]}