{"version":3,"sources":["base.js"],"names":["define","utils","Exception","b","c","logger","protoAccess","HandlebarsEnvironment","helpers","partials","decorators","this","registerDefaultHelpers","registerDefaultDecorators","prototype","constructor","log","registerHelper","name","fn","toString","call","extend","unregisterHelper","registerPartial","partial","unregisterPartial","registerDecorator","unregisterDecorator","resetLoggedPropertyAccesses","resetLoggedProperties","VERSION","COMPILER_REVISION","LAST_COMPATIBLE_COMPILER_REVISION","REVISION_CHANGES","1","2","3","4","5","6","7","8","createFrame"],"mappings":";;;;;;;AAAAA,QACI,UACA,cACA,YACA,eACA,WACA,2BACD,SAAUC,EAAOC,EAAWC,EAAGC,EAAGC,EAAQC,GACzC,aAeA,SAASC,EAAsBC,EAASC,EAAUC,GAC9CC,KAAKH,QAAUA,MACfG,KAAKF,SAAWA,MAChBE,KAAKD,WAAaA,MAClBP,EAAES,uBAAuBD,MACzBP,EAAES,0BAA0BF,MAmDhC,OAjDAJ,EAAsBO,WAClBC,YAAaR,EACbF,OAAQA,EACRW,IAAKX,EAAOW,IACZC,eAAgB,SAAUC,EAAMC,GAC5B,GAbW,oBAaPlB,EAAMmB,SAASC,KAAKH,GAAsB,CAC1C,GAAIC,EACA,MAAM,IAAIjB,EAAU,2CAExBD,EAAMqB,OAAOX,KAAKH,QAASU,QAE3BP,KAAKH,QAAQU,GAAQC,GAG7BI,iBAAkB,SAAUL,UACjBP,KAAKH,QAAQU,IAExBM,gBAAiB,SAAUN,EAAMO,GAC7B,GA1BW,oBA0BPxB,EAAMmB,SAASC,KAAKH,GACpBjB,EAAMqB,OAAOX,KAAKF,SAAUS,OACzB,CACH,QAAuB,IAAZO,EACP,MAAM,IAAIvB,8CAAuDgB,mBAErEP,KAAKF,SAASS,GAAQO,IAG9BC,kBAAmB,SAAUR,UAClBP,KAAKF,SAASS,IAEzBS,kBAAmB,SAAUT,EAAMC,GAC/B,GAvCW,oBAuCPlB,EAAMmB,SAASC,KAAKH,GAAsB,CAC1C,GAAIC,EACA,MAAM,IAAIjB,EAAU,8CAExBD,EAAMqB,OAAOX,KAAKD,WAAYQ,QAE9BP,KAAKD,WAAWQ,GAAQC,GAGhCS,oBAAqB,SAAUV,UACpBP,KAAKD,WAAWQ,IAE3BW,4BAA6B,WACzBvB,EAAYwB,2BAMhBC,QAvEY,QAwEZC,kBAvEsB,EAwEtBC,kCAvEsC,EAwEtCC,kBAtEAC,EAAG,cACHC,EAAG,gBACHC,EAAG,gBACHC,EAAG,WACHC,EAAG,mBACHC,EAAG,kBACHC,EAAG,kBACHC,EAAG,YAgEHnC,sBAAAA,EACAS,IARMX,EAAOW,IASb2B,YARc1C,EAAM0C,YASpBtC,OAAAA","file":"../base.js","sourcesContent":["define([\n    './utils',\n    './exception',\n    './helpers',\n    './decorators',\n    './logger',\n    './internal/proto-access'\n], function (utils, Exception, b, c, logger, protoAccess) {\n    'use strict';\n    const VERSION = '4.7.6';\n    const COMPILER_REVISION = 8;\n    const LAST_COMPATIBLE_COMPILER_REVISION = 7;\n    const REVISION_CHANGES = {\n        1: '<= 1.0.rc.2',\n        2: '== 1.0.0-rc.3',\n        3: '== 1.0.0-rc.4',\n        4: '== 1.x.x',\n        5: '== 2.0.0-alpha.x',\n        6: '>= 2.0.0-beta.1',\n        7: '>= 4.0.0 <4.3.0',\n        8: '>= 4.3.0'\n    };\n    const objectType = '[object Object]';\n    function HandlebarsEnvironment(helpers, partials, decorators) {\n        this.helpers = helpers || {};\n        this.partials = partials || {};\n        this.decorators = decorators || {};\n        b.registerDefaultHelpers(this);\n        c.registerDefaultDecorators(this);\n    }\n    HandlebarsEnvironment.prototype = {\n        constructor: HandlebarsEnvironment,\n        logger: logger,\n        log: logger.log,\n        registerHelper: function (name, fn) {\n            if (utils.toString.call(name) === objectType) {\n                if (fn) {\n                    throw new Exception('Arg not supported with multiple helpers');\n                }\n                utils.extend(this.helpers, name);\n            } else {\n                this.helpers[name] = fn;\n            }\n        },\n        unregisterHelper: function (name) {\n            delete this.helpers[name];\n        },\n        registerPartial: function (name, partial) {\n            if (utils.toString.call(name) === objectType) {\n                utils.extend(this.partials, name);\n            } else {\n                if (typeof partial === 'undefined') {\n                    throw new Exception(`Attempting to register a partial called \"${ name }\" as undefined`);\n                }\n                this.partials[name] = partial;\n            }\n        },\n        unregisterPartial: function (name) {\n            delete this.partials[name];\n        },\n        registerDecorator: function (name, fn) {\n            if (utils.toString.call(name) === objectType) {\n                if (fn) {\n                    throw new Exception('Arg not supported with multiple decorators');\n                }\n                utils.extend(this.decorators, name);\n            } else {\n                this.decorators[name] = fn;\n            }\n        },\n        unregisterDecorator: function (name) {\n            delete this.decorators[name];\n        },\n        resetLoggedPropertyAccesses: function () {\n            protoAccess.resetLoggedProperties();\n        }\n    };\n    let log = logger.log,\n        createFrame = utils.createFrame;\n    return {\n        VERSION,\n        COMPILER_REVISION,\n        LAST_COMPATIBLE_COMPILER_REVISION,\n        REVISION_CHANGES,\n        HandlebarsEnvironment,\n        log,\n        createFrame,\n        logger\n    };\n});"]}