{"version":3,"sources":["main.js"],"names":["define","skylark","AST","base","compiler","JavaScriptCompiler","Visitor","create","hb","HandlebarsEnvironment","Utils","extend","SafeString","Exception","escapeExpression","VM","runtime","template","spec","compile","input","options","precompile","Compiler","Parser","parse","parseWithoutProcessing","inst","attach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,iBACA,kBACA,sBACA,iCACA,sBACD,SAAUC,EAASC,EAAKC,EAAMC,EAAUC,EAAoBC,GAC3D,aAEA,SAASC,IACL,IAAIC,EAAK,IAAIL,EAAKM,sBAwBlB,OAvBAC,MAAMC,OAAOH,EAAIL,GACjBK,EAAGI,WAAaA,WAChBJ,EAAGK,UAAYA,UACfL,EAAGE,MAAQA,MACXF,EAAGM,iBAAmBJ,MAAMI,iBAC5BN,EAAGO,GAAKC,QACRR,EAAGS,SAAW,SAAUC,GACpB,OAAOF,QAAQC,SAASC,EAAMV,IAIlCA,EAAGW,QAAU,SAAUC,EAAOC,GAC1B,OAAOjB,EAASe,QAAQC,EAAOC,EAASb,IAE5CA,EAAGc,WAAa,SAAUF,EAAOC,GAC7B,OAAOjB,EAASkB,WAAWF,EAAOC,EAASb,IAE/CA,EAAGN,IAAMA,EACTM,EAAGe,SAAWnB,EAASmB,SACvBf,EAAGH,mBAAqBA,EACxBG,EAAGgB,OAASrB,EAAKqB,OACjBhB,EAAGiB,MAAQtB,EAAKsB,MAChBjB,EAAGkB,uBAAyBvB,EAAKuB,uBAC1BlB,EAEX,IAAImB,EAAOpB,IAIX,OAHAoB,EAAKpB,OAASA,EACdoB,EAAKrB,QAAUA,EAERL,EAAQ2B,OAAO,kBAAkBD","file":"../main.js","sourcesContent":["define([\n    \"skylark-langx/skylark\",\n    './compiler/ast',\n    './compiler/base',\n    './compiler/compiler',\n    './compiler/javascript-compiler',\n    './compiler/visitor'\n], function (skylark, AST, base, compiler, JavaScriptCompiler, Visitor) {\n    'use strict';\n\n    function create() {\n        let hb = new base.HandlebarsEnvironment();\n        Utils.extend(hb, base);\n        hb.SafeString = SafeString;\n        hb.Exception = Exception;\n        hb.Utils = Utils;\n        hb.escapeExpression = Utils.escapeExpression;\n        hb.VM = runtime;\n        hb.template = function (spec) {\n            return runtime.template(spec, hb);\n        };\n\n\n        hb.compile = function (input, options) {\n            return compiler.compile(input, options, hb);\n        };\n        hb.precompile = function (input, options) {\n            return compiler.precompile(input, options, hb);\n        };\n        hb.AST = AST;\n        hb.Compiler = compiler.Compiler;\n        hb.JavaScriptCompiler = JavaScriptCompiler;\n        hb.Parser = base.Parser;\n        hb.parse = base.parse;\n        hb.parseWithoutProcessing = base.parseWithoutProcessing;\n        return hb;\n    }\n    let inst = create();\n    inst.create = create;\n    inst.Visitor = Visitor;\n\n    return skylark.attach(\"intg.handlebars\",inst);\n});"]}