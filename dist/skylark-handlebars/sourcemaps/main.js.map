{"version":3,"sources":["main.js"],"names":["define","skylark","base","Utils","runtime","Exception","SafeString","AST","cbase","compiler","JavaScriptCompiler","Visitor","create","hb","HandlebarsEnvironment","extend","escapeExpression","VM","template","spec","compile","input","options","precompile","Compiler","Parser","parse","parseWithoutProcessing","inst","attach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,SACA,UACA,YACA,cACA,gBACA,iBACA,kBACA,sBACA,iCACA,sBAED,SAAUC,EAASC,EAAMC,EAAMC,EAAQC,EAAUC,EAAYC,EAAIC,EAAOC,EAAUC,EAAoBC,GACrG,aAEA,SAASC,IACL,IAAIC,EAAK,IAAIX,EAAKY,sBA0BlB,OAzBAX,EAAMY,OAAOF,EAAIX,GACjBW,EAAGP,WAAaA,EAChBO,EAAGR,UAAYA,EACfQ,EAAGV,MAAQA,EACXU,EAAGG,iBAAmBb,EAAMa,iBAC5BH,EAAGI,GAAKb,EAERS,EAAGK,SAAW,SAAUC,GACpB,OAAOf,EAAQc,SAASC,EAAMN,IAGlCA,EAAGO,QAAU,SAAUC,EAAOC,GAC1B,OAAOb,EAASW,QAAQC,EAAOC,EAAST,IAG5CA,EAAGU,WAAa,SAAUF,EAAOC,GAC7B,OAAOb,EAASc,WAAWF,EAAOC,EAAST,IAG/CA,EAAGN,IAAMA,EACTM,EAAGW,SAAWf,EAASe,SACvBX,EAAGH,mBAAqBA,EACxBG,EAAGY,OAASjB,EAAMiB,OAClBZ,EAAGa,MAAQlB,EAAMkB,MACjBb,EAAGc,uBAAyBzB,EAAKyB,uBAC1Bd,EAEX,IAAIe,EAAOhB,IAIX,OAHAgB,EAAKhB,OAASA,EACdgB,EAAKjB,QAAUA,EAERV,EAAQ4B,OAAO,kBAAkBD","file":"../main.js","sourcesContent":["define([\n    \"skylark-langx/skylark\",\n    './base',\n    \"./utils\",\n    \"./runtime\",\n    \"./exception\",\n    \"./safe-string\",\n    './compiler/ast',\n    './compiler/base',\n    './compiler/compiler',\n    './compiler/javascript-compiler',\n    './compiler/visitor'\n\n], function (skylark, base, Utils,runtime,Exception,SafeString, AST,cbase, compiler, JavaScriptCompiler, Visitor) {\n    'use strict';\n\n    function create() {\n        let hb = new base.HandlebarsEnvironment();\n        Utils.extend(hb, base);\n        hb.SafeString = SafeString;\n        hb.Exception = Exception;\n        hb.Utils = Utils;\n        hb.escapeExpression = Utils.escapeExpression;\n        hb.VM = runtime;\n\n        hb.template = function (spec) {\n            return runtime.template(spec, hb);\n        };\n\n        hb.compile = function (input, options) {\n            return compiler.compile(input, options, hb);\n        };\n\n        hb.precompile = function (input, options) {\n            return compiler.precompile(input, options, hb);\n        };\n        \n        hb.AST = AST;\n        hb.Compiler = compiler.Compiler;\n        hb.JavaScriptCompiler = JavaScriptCompiler;\n        hb.Parser = cbase.Parser;\n        hb.parse = cbase.parse;\n        hb.parseWithoutProcessing = base.parseWithoutProcessing;\n        return hb;\n    }\n    let inst = create();\n    inst.create = create;\n    inst.Visitor = Visitor;\n\n    return skylark.attach(\"intg.handlebars\",inst);\n});"]}