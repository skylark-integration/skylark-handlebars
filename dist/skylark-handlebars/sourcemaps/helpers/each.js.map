{"version":3,"sources":["helpers/each.js"],"names":["define","utils","Exception","instance","registerHelper","context","options","data","contextPath","fn","inverse","i","ret","execIteration","field","index","last","key","first","blockParams","ids","appendContextPath","isFunction","call","this","createFrame","isArray","j","length","global","Symbol","iterator","newContext","it","next","done","push","value","priorKey","Object","keys","forEach","undefined"],"mappings":";;;;;;;AAAAA,QACI,WACA,gBACD,SAAUC,EAAOC,GAChB,aACA,OAAO,SAAUC,GACbA,EAASC,eAAe,OAAQ,SAAUC,EAASC,GAC/C,IAAKA,EACD,MAAM,IAAIJ,EAAU,+BAExB,IAAiEK,EAAMC,EAAnEC,EAAKH,EAAQG,GAAIC,EAAUJ,EAAQI,QAASC,EAAI,EAAGC,EAAM,GAU7D,SAASC,EAAcC,EAAOC,EAAOC,GAC7BT,IACAA,EAAKU,IAAMH,EACXP,EAAKQ,MAAQA,EACbR,EAAKW,MAAkB,IAAVH,EACbR,EAAKS,OAASA,EACVR,IACAD,EAAKC,YAAcA,EAAcM,IAGzCF,GAAYH,EAAGJ,EAAQS,IACnBP,KAAMA,EACNY,YAAalB,EAAMkB,aACfd,EAAQS,GACRA,IAEAN,EAAcM,EACd,SAIZ,GA9BIR,EAAQC,MAAQD,EAAQc,MACxBZ,EAAcP,EAAMoB,kBAAkBf,EAAQC,KAAKC,YAAaF,EAAQc,IAAI,IAAM,KAElFnB,EAAMqB,WAAWjB,KACjBA,EAAUA,EAAQkB,KAAKC,OAEvBlB,EAAQC,OACRA,EAAON,EAAMwB,YAAYnB,EAAQC,OAuBjCF,GAA8B,iBAAZA,EAClB,GAAIJ,EAAMyB,QAAQrB,GACd,IAAK,IAAIsB,EAAItB,EAAQuB,OAAQjB,EAAIgB,EAAGhB,IAC5BA,KAAKN,GACLQ,EAAcF,EAAGA,EAAGA,IAAMN,EAAQuB,OAAS,QAGhD,GAAIC,OAAOC,QAAUzB,EAAQwB,OAAOC,OAAOC,UAAW,CACzD,MAAMC,KACAD,EAAW1B,EAAQwB,OAAOC,OAAOC,YACvC,IAAK,IAAIE,EAAKF,EAASG,QAASD,EAAGE,KAAMF,EAAKF,EAASG,OACnDF,EAAWI,KAAKH,EAAGI,OAGvB,IAAK,IAAIV,GADTtB,EAAU2B,GACWJ,OAAQjB,EAAIgB,EAAGhB,IAChCE,EAAcF,EAAGA,EAAGA,IAAMN,EAAQuB,OAAS,OAE5C,CACH,IAAIU,EACJC,OAAOC,KAAKnC,GAASoC,QAAQxB,SACRyB,IAAbJ,GACAzB,EAAcyB,EAAU3B,EAAI,GAEhC2B,EAAWrB,EACXN,WAEa+B,IAAbJ,GACAzB,EAAcyB,EAAU3B,EAAI,GAAG,GAO3C,OAHU,IAANA,IACAC,EAAMF,EAAQc,OAEXZ","file":"../../helpers/each.js","sourcesContent":["define([\n    '../utils',\n    '../exception'\n], function (utils, Exception) {\n    'use strict';\n    return function (instance) {\n        instance.registerHelper('each', function (context, options) {\n            if (!options) {\n                throw new Exception('Must pass iterator to #each');\n            }\n            let fn = options.fn, inverse = options.inverse, i = 0, ret = '', data, contextPath;\n            if (options.data && options.ids) {\n                contextPath = utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n            }\n            if (utils.isFunction(context)) {\n                context = context.call(this);\n            }\n            if (options.data) {\n                data = utils.createFrame(options.data);\n            }\n            function execIteration(field, index, last) {\n                if (data) {\n                    data.key = field;\n                    data.index = index;\n                    data.first = index === 0;\n                    data.last = !!last;\n                    if (contextPath) {\n                        data.contextPath = contextPath + field;\n                    }\n                }\n                ret = ret + fn(context[field], {\n                    data: data,\n                    blockParams: utils.blockParams([\n                        context[field],\n                        field\n                    ], [\n                        contextPath + field,\n                        null\n                    ])\n                });\n            }\n            if (context && typeof context === 'object') {\n                if (utils.isArray(context)) {\n                    for (let j = context.length; i < j; i++) {\n                        if (i in context) {\n                            execIteration(i, i, i === context.length - 1);\n                        }\n                    }\n                } else if (global.Symbol && context[global.Symbol.iterator]) {\n                    const newContext = [];\n                    const iterator = context[global.Symbol.iterator]();\n                    for (let it = iterator.next(); !it.done; it = iterator.next()) {\n                        newContext.push(it.value);\n                    }\n                    context = newContext;\n                    for (let j = context.length; i < j; i++) {\n                        execIteration(i, i, i === context.length - 1);\n                    }\n                } else {\n                    let priorKey;\n                    Object.keys(context).forEach(key => {\n                        if (priorKey !== undefined) {\n                            execIteration(priorKey, i - 1);\n                        }\n                        priorKey = key;\n                        i++;\n                    });\n                    if (priorKey !== undefined) {\n                        execIteration(priorKey, i - 1, true);\n                    }\n                }\n            }\n            if (i === 0) {\n                ret = inverse(this);\n            }\n            return ret;\n        });\n    };\n});"]}