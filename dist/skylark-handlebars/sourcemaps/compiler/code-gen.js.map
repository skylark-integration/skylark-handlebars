{"version":3,"sources":["compiler/code-gen.js"],"names":["define","a","SourceNode","amd","SourceMap","require","err","castChunk","chunk","codeGen","loc","isArray","ret","i","len","length","push","wrap","CodeGen","srcFile","this","source","line","column","chunks","src","add","prototype","join","prepend","toStringWithSourceMap","code","toString","[object Object]","unshift","merge","empty","each","iter","currentLocation","start","functionCall","fn","type","params","generateList","quotedString","str","replace","objectLiteral","obj","pairs","Object","keys","forEach","key","value","entries","generateArray"],"mappings":"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","file":"../../compiler/code-gen.js","sourcesContent":["define(['../utils'], function (a) {\n    'use strict';\n    let SourceNode;\n    try {\n        if (typeof define !== 'function' || !define.amd) {\n            let SourceMap = require('source-map');\n            SourceNode = SourceMap.SourceNode;\n        }\n    } catch (err) {\n    }\n    if (!SourceNode) {\n        SourceNode = function (line, column, srcFile, chunks) {\n            this.src = '';\n            if (chunks) {\n                this.add(chunks);\n            }\n        };\n        SourceNode.prototype = {\n            add: function (chunks) {\n                if (a.isArray(chunks)) {\n                    chunks = chunks.join('');\n                }\n                this.src += chunks;\n            },\n            prepend: function (chunks) {\n                if (a.isArray(chunks)) {\n                    chunks = chunks.join('');\n                }\n                this.src = chunks + this.src;\n            },\n            toStringWithSourceMap: function () {\n                return { code: this.toString() };\n            },\n            toString: function () {\n                return this.src;\n            }\n        };\n    }\n    function castChunk(chunk, codeGen, loc) {\n        if (a.isArray(chunk)) {\n            let ret = [];\n            for (let i = 0, len = chunk.length; i < len; i++) {\n                ret.push(codeGen.wrap(chunk[i], loc));\n            }\n            return ret;\n        } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n            return chunk + '';\n        }\n        return chunk;\n    }\n    function CodeGen(srcFile) {\n        this.srcFile = srcFile;\n        this.source = [];\n    }\n    CodeGen.prototype = {\n        isEmpty() {\n            return !this.source.length;\n        },\n        prepend: function (source, loc) {\n            this.source.unshift(this.wrap(source, loc));\n        },\n        push: function (source, loc) {\n            this.source.push(this.wrap(source, loc));\n        },\n        merge: function () {\n            let source = this.empty();\n            this.each(function (line) {\n                source.add([\n                    '  ',\n                    line,\n                    '\\n'\n                ]);\n            });\n            return source;\n        },\n        each: function (iter) {\n            for (let i = 0, len = this.source.length; i < len; i++) {\n                iter(this.source[i]);\n            }\n        },\n        empty: function () {\n            let loc = this.currentLocation || { start: {} };\n            return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n        },\n        wrap: function (chunk, loc = this.currentLocation || { start: {} }) {\n            if (chunk instanceof SourceNode) {\n                return chunk;\n            }\n            chunk = castChunk(chunk, this, loc);\n            return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n        },\n        functionCall: function (fn, type, params) {\n            params = this.generateList(params);\n            return this.wrap([\n                fn,\n                type ? '.' + type + '(' : '(',\n                params,\n                ')'\n            ]);\n        },\n        quotedString: function (str) {\n            return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029') + '\"';\n        },\n        objectLiteral: function (obj) {\n            let pairs = [];\n            Object.keys(obj).forEach(key => {\n                let value = castChunk(obj[key], this);\n                if (value !== 'undefined') {\n                    pairs.push([\n                        this.quotedString(key),\n                        ':',\n                        value\n                    ]);\n                }\n            });\n            let ret = this.generateList(pairs);\n            ret.prepend('{');\n            ret.add('}');\n            return ret;\n        },\n        generateList: function (entries) {\n            let ret = this.empty();\n            for (let i = 0, len = entries.length; i < len; i++) {\n                if (i) {\n                    ret.add(',');\n                }\n                ret.add(castChunk(entries[i], this));\n            }\n            return ret;\n        },\n        generateArray: function (entries) {\n            let ret = this.generateList(entries);\n            ret.prepend('[');\n            ret.add(']');\n            return ret;\n        }\n    };\n    return CodeGen;\n});"]}