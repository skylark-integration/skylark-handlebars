{"version":3,"sources":["compiler/javascript-compiler.js"],"names":["define","base","Exception","utils","CodeGen","Literal","value","this","JavaScriptCompiler","prototype","nameLookup","parent","name","internalNameLookup","depthedLookup","aliasable","compilerInfo","revision","COMPILER_REVISION","REVISION_CHANGES","appendToBuffer","source","location","explicit","isArray","wrap","environment","isSimple","initializeBuffer","quotedString","lookupPropertyFunctionIsUsed","JSON","stringify","compile","options","context","asObject","stringParams","trackIds","precompile","isChild","decorators","programs","environments","preamble","stackSlot","stackVars","aliases","registers","list","hashes","compileStack","inlineStack","blockParams","compileChildren","useDepths","useDecorators","compat","useBlockParams","opcode","firstLoc","i","l","opcodes","length","currentLocation","loc","apply","args","pushSource","isEmpty","undefined","prepend","lookupPropertyFunctionVarDeclaration","push","Function","merge","fn","createFunctionContext","ret","compiler","main","main_d","usePartial","data","useData","compilerOptions","start","line","column","objectLiteral","srcName","toStringWithSourceMap","file","destName","map","toString","lastContext","varDeclarations","locals","concat","join","aliasCount","Object","keys","forEach","alias","node","children","referenceCount","params","mergeSource","appendFirst","sourceSeen","bufferStart","bufferEnd","appendOnly","forceBuffer","each","add","substring","trim","blockValue","blockHelperMissing","contextName","setupHelperArgs","blockName","popStack","splice","functionCall","ambiguousBlockValue","flushInline","current","topStack","lastHelper","appendContent","content","pendingContent","pendingLocation","append","isInline","replaceStack","local","appendEscaped","getContext","depth","pushContext","pushStackLiteral","lookupOnContext","parts","falsy","strict","scoped","resolvePath","lookupBlockParam","blockParamId","lookupData","type","assumeObjects","requireTerminal","stack","len","strictLookup","lookup","resolvePossibleLambda","pushStringParam","string","pushString","emptyHash","omitEmpty","pushHash","hash","values","types","contexts","ids","popHash","pop","pushLiteral","pushProgram","guid","programExpression","[object Object]","paramSize","foundDecorator","invokeHelper","nonHelper","helper","setupHelper","possibleFunctionCalls","functionLookupCode","itemsSeparatedBy","callParams","items","separator","result","invokeKnownHelper","invokeAmbiguous","helperCall","useRegister","paramsInit","invokePartial","isDynamic","indent","setupParams","helpers","partials","unshift","depths","assignToHash","key","id","pushId","child","existing","matchExistingProgram","index","equals","programParams","expr","item","callback","createdStack","usedLiteral","prefix","top","incrStack","call","topStackName","entry","wrapped","inline","str","obj","blockHelper","param","objectArgs","hashIds","hashTypes","hashContexts","inverse","program","generateArray","reservedWords","split","compilerWords","RESERVED_WORDS","isValidJavaScriptVariableName","test"],"mappings":"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","file":"../../compiler/javascript-compiler.js","sourcesContent":["define([\n    '../base',\n    '../exception',\n    '../utils',\n    './code-gen'\n], function (base, Exception, utils, CodeGen) {\n    'use strict';\n    function Literal(value) {\n        this.value = value;\n    }\n    function JavaScriptCompiler() {\n    }\n    JavaScriptCompiler.prototype = {\n        nameLookup: function (parent, name) {\n            return this.internalNameLookup(parent, name);\n        },\n        depthedLookup: function (name) {\n            return [\n                this.aliasable('container.lookup'),\n                '(depths, \"',\n                name,\n                '\")'\n            ];\n        },\n        compilerInfo: function () {\n            const revision = base.COMPILER_REVISION, versions = base.REVISION_CHANGES[revision];\n            return [\n                revision,\n                versions\n            ];\n        },\n        appendToBuffer: function (source, location, explicit) {\n            if (!utils.isArray(source)) {\n                source = [source];\n            }\n            source = this.source.wrap(source, location);\n            if (this.environment.isSimple) {\n                return [\n                    'return ',\n                    source,\n                    ';'\n                ];\n            } else if (explicit) {\n                return [\n                    'buffer += ',\n                    source,\n                    ';'\n                ];\n            } else {\n                source.appendToBuffer = true;\n                return source;\n            }\n        },\n        initializeBuffer: function () {\n            return this.quotedString('');\n        },\n        internalNameLookup: function (parent, name) {\n            this.lookupPropertyFunctionIsUsed = true;\n            return [\n                'lookupProperty(',\n                parent,\n                ',',\n                JSON.stringify(name),\n                ')'\n            ];\n        },\n        lookupPropertyFunctionIsUsed: false,\n        compile: function (environment, options, context, asObject) {\n            this.environment = environment;\n            this.options = options;\n            this.stringParams = this.options.stringParams;\n            this.trackIds = this.options.trackIds;\n            this.precompile = !asObject;\n            this.name = this.environment.name;\n            this.isChild = !!context;\n            this.context = context || {\n                decorators: [],\n                programs: [],\n                environments: []\n            };\n            this.preamble();\n            this.stackSlot = 0;\n            this.stackVars = [];\n            this.aliases = {};\n            this.registers = { list: [] };\n            this.hashes = [];\n            this.compileStack = [];\n            this.inlineStack = [];\n            this.blockParams = [];\n            this.compileChildren(environment, options);\n            this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;\n            this.useBlockParams = this.useBlockParams || environment.useBlockParams;\n            let opcodes = environment.opcodes, opcode, firstLoc, i, l;\n            for (i = 0, l = opcodes.length; i < l; i++) {\n                opcode = opcodes[i];\n                this.source.currentLocation = opcode.loc;\n                firstLoc = firstLoc || opcode.loc;\n                this[opcode.opcode].apply(this, opcode.args);\n            }\n            this.source.currentLocation = firstLoc;\n            this.pushSource('');\n            if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n                throw new Exception('Compile completed with content left on stack');\n            }\n            if (!this.decorators.isEmpty()) {\n                this.useDecorators = true;\n                this.decorators.prepend([\n                    'var decorators = container.decorators, ',\n                    this.lookupPropertyFunctionVarDeclaration(),\n                    ';\\n'\n                ]);\n                this.decorators.push('return fn;');\n                if (asObject) {\n                    this.decorators = Function.apply(this, [\n                        'fn',\n                        'props',\n                        'container',\n                        'depth0',\n                        'data',\n                        'blockParams',\n                        'depths',\n                        this.decorators.merge()\n                    ]);\n                } else {\n                    this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\\n');\n                    this.decorators.push('}\\n');\n                    this.decorators = this.decorators.merge();\n                }\n            } else {\n                this.decorators = undefined;\n            }\n            let fn = this.createFunctionContext(asObject);\n            if (!this.isChild) {\n                let ret = {\n                    compiler: this.compilerInfo(),\n                    main: fn\n                };\n                if (this.decorators) {\n                    ret.main_d = this.decorators;\n                    ret.useDecorators = true;\n                }\n                let {programs, decorators} = this.context;\n                for (i = 0, l = programs.length; i < l; i++) {\n                    if (programs[i]) {\n                        ret[i] = programs[i];\n                        if (decorators[i]) {\n                            ret[i + '_d'] = decorators[i];\n                            ret.useDecorators = true;\n                        }\n                    }\n                }\n                if (this.environment.usePartial) {\n                    ret.usePartial = true;\n                }\n                if (this.options.data) {\n                    ret.useData = true;\n                }\n                if (this.useDepths) {\n                    ret.useDepths = true;\n                }\n                if (this.useBlockParams) {\n                    ret.useBlockParams = true;\n                }\n                if (this.options.compat) {\n                    ret.compat = true;\n                }\n                if (!asObject) {\n                    ret.compiler = JSON.stringify(ret.compiler);\n                    this.source.currentLocation = {\n                        start: {\n                            line: 1,\n                            column: 0\n                        }\n                    };\n                    ret = this.objectLiteral(ret);\n                    if (options.srcName) {\n                        ret = ret.toStringWithSourceMap({ file: options.destName });\n                        ret.map = ret.map && ret.map.toString();\n                    } else {\n                        ret = ret.toString();\n                    }\n                } else {\n                    ret.compilerOptions = this.options;\n                }\n                return ret;\n            } else {\n                return fn;\n            }\n        },\n        preamble: function () {\n            this.lastContext = 0;\n            this.source = new CodeGen(this.options.srcName);\n            this.decorators = new CodeGen(this.options.srcName);\n        },\n        createFunctionContext: function (asObject) {\n            let varDeclarations = '';\n            let locals = this.stackVars.concat(this.registers.list);\n            if (locals.length > 0) {\n                varDeclarations += ', ' + locals.join(', ');\n            }\n            let aliasCount = 0;\n            Object.keys(this.aliases).forEach(alias => {\n                let node = this.aliases[alias];\n                if (node.children && node.referenceCount > 1) {\n                    varDeclarations += ', alias' + ++aliasCount + '=' + alias;\n                    node.children[0] = 'alias' + aliasCount;\n                }\n            });\n            if (this.lookupPropertyFunctionIsUsed) {\n                varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();\n            }\n            let params = [\n                'container',\n                'depth0',\n                'helpers',\n                'partials',\n                'data'\n            ];\n            if (this.useBlockParams || this.useDepths) {\n                params.push('blockParams');\n            }\n            if (this.useDepths) {\n                params.push('depths');\n            }\n            let source = this.mergeSource(varDeclarations);\n            if (asObject) {\n                params.push(source);\n                return Function.apply(this, params);\n            } else {\n                return this.source.wrap([\n                    'function(',\n                    params.join(','),\n                    ') {\\n  ',\n                    source,\n                    '}'\n                ]);\n            }\n        },\n        mergeSource: function (varDeclarations) {\n            let isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst, sourceSeen, bufferStart, bufferEnd;\n            this.source.each(line => {\n                if (line.appendToBuffer) {\n                    if (bufferStart) {\n                        line.prepend('  + ');\n                    } else {\n                        bufferStart = line;\n                    }\n                    bufferEnd = line;\n                } else {\n                    if (bufferStart) {\n                        if (!sourceSeen) {\n                            appendFirst = true;\n                        } else {\n                            bufferStart.prepend('buffer += ');\n                        }\n                        bufferEnd.add(';');\n                        bufferStart = bufferEnd = undefined;\n                    }\n                    sourceSeen = true;\n                    if (!isSimple) {\n                        appendOnly = false;\n                    }\n                }\n            });\n            if (appendOnly) {\n                if (bufferStart) {\n                    bufferStart.prepend('return ');\n                    bufferEnd.add(';');\n                } else if (!sourceSeen) {\n                    this.source.push('return \"\";');\n                }\n            } else {\n                varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());\n                if (bufferStart) {\n                    bufferStart.prepend('return buffer + ');\n                    bufferEnd.add(';');\n                } else {\n                    this.source.push('return buffer;');\n                }\n            }\n            if (varDeclarations) {\n                this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\\n'));\n            }\n            return this.source.merge();\n        },\n        lookupPropertyFunctionVarDeclaration: function () {\n            return `\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    `.trim();\n        },\n        blockValue: function (name) {\n            let blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'), params = [this.contextName(0)];\n            this.setupHelperArgs(name, 0, params);\n            let blockName = this.popStack();\n            params.splice(1, 0, blockName);\n            this.push(this.source.functionCall(blockHelperMissing, 'call', params));\n        },\n        ambiguousBlockValue: function () {\n            let blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'), params = [this.contextName(0)];\n            this.setupHelperArgs('', 0, params, true);\n            this.flushInline();\n            let current = this.topStack();\n            params.splice(1, 0, current);\n            this.pushSource([\n                'if (!',\n                this.lastHelper,\n                ') { ',\n                current,\n                ' = ',\n                this.source.functionCall(blockHelperMissing, 'call', params),\n                '}'\n            ]);\n        },\n        appendContent: function (content) {\n            if (this.pendingContent) {\n                content = this.pendingContent + content;\n            } else {\n                this.pendingLocation = this.source.currentLocation;\n            }\n            this.pendingContent = content;\n        },\n        append: function () {\n            if (this.isInline()) {\n                this.replaceStack(current => [\n                    ' != null ? ',\n                    current,\n                    ' : \"\"'\n                ]);\n                this.pushSource(this.appendToBuffer(this.popStack()));\n            } else {\n                let local = this.popStack();\n                this.pushSource([\n                    'if (',\n                    local,\n                    ' != null) { ',\n                    this.appendToBuffer(local, undefined, true),\n                    ' }'\n                ]);\n                if (this.environment.isSimple) {\n                    this.pushSource([\n                        'else { ',\n                        this.appendToBuffer(\"''\", undefined, true),\n                        ' }'\n                    ]);\n                }\n            }\n        },\n        appendEscaped: function () {\n            this.pushSource(this.appendToBuffer([\n                this.aliasable('container.escapeExpression'),\n                '(',\n                this.popStack(),\n                ')'\n            ]));\n        },\n        getContext: function (depth) {\n            this.lastContext = depth;\n        },\n        pushContext: function () {\n            this.pushStackLiteral(this.contextName(this.lastContext));\n        },\n        lookupOnContext: function (parts, falsy, strict, scoped) {\n            let i = 0;\n            if (!scoped && this.options.compat && !this.lastContext) {\n                this.push(this.depthedLookup(parts[i++]));\n            } else {\n                this.pushContext();\n            }\n            this.resolvePath('context', parts, i, falsy, strict);\n        },\n        lookupBlockParam: function (blockParamId, parts) {\n            this.useBlockParams = true;\n            this.push([\n                'blockParams[',\n                blockParamId[0],\n                '][',\n                blockParamId[1],\n                ']'\n            ]);\n            this.resolvePath('context', parts, 1);\n        },\n        lookupData: function (depth, parts, strict) {\n            if (!depth) {\n                this.pushStackLiteral('data');\n            } else {\n                this.pushStackLiteral('container.data(data, ' + depth + ')');\n            }\n            this.resolvePath('data', parts, 0, true, strict);\n        },\n        resolvePath: function (type, parts, i, falsy, strict) {\n            if (this.options.strict || this.options.assumeObjects) {\n                this.push(strictLookup(this.options.strict && strict, this, parts, type));\n                return;\n            }\n            let len = parts.length;\n            for (; i < len; i++) {\n                this.replaceStack(current => {\n                    let lookup = this.nameLookup(current, parts[i], type);\n                    if (!falsy) {\n                        return [\n                            ' != null ? ',\n                            lookup,\n                            ' : ',\n                            current\n                        ];\n                    } else {\n                        return [\n                            ' && ',\n                            lookup\n                        ];\n                    }\n                });\n            }\n        },\n        resolvePossibleLambda: function () {\n            this.push([\n                this.aliasable('container.lambda'),\n                '(',\n                this.popStack(),\n                ', ',\n                this.contextName(0),\n                ')'\n            ]);\n        },\n        pushStringParam: function (string, type) {\n            this.pushContext();\n            this.pushString(type);\n            if (type !== 'SubExpression') {\n                if (typeof string === 'string') {\n                    this.pushString(string);\n                } else {\n                    this.pushStackLiteral(string);\n                }\n            }\n        },\n        emptyHash: function (omitEmpty) {\n            if (this.trackIds) {\n                this.push('{}');\n            }\n            if (this.stringParams) {\n                this.push('{}');\n                this.push('{}');\n            }\n            this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');\n        },\n        pushHash: function () {\n            if (this.hash) {\n                this.hashes.push(this.hash);\n            }\n            this.hash = {\n                values: {},\n                types: [],\n                contexts: [],\n                ids: []\n            };\n        },\n        popHash: function () {\n            let hash = this.hash;\n            this.hash = this.hashes.pop();\n            if (this.trackIds) {\n                this.push(this.objectLiteral(hash.ids));\n            }\n            if (this.stringParams) {\n                this.push(this.objectLiteral(hash.contexts));\n                this.push(this.objectLiteral(hash.types));\n            }\n            this.push(this.objectLiteral(hash.values));\n        },\n        pushString: function (string) {\n            this.pushStackLiteral(this.quotedString(string));\n        },\n        pushLiteral: function (value) {\n            this.pushStackLiteral(value);\n        },\n        pushProgram: function (guid) {\n            if (guid != null) {\n                this.pushStackLiteral(this.programExpression(guid));\n            } else {\n                this.pushStackLiteral(null);\n            }\n        },\n        registerDecorator(paramSize, name) {\n            let foundDecorator = this.nameLookup('decorators', name, 'decorator'), options = this.setupHelperArgs(name, paramSize);\n            this.decorators.push([\n                'fn = ',\n                this.decorators.functionCall(foundDecorator, '', [\n                    'fn',\n                    'props',\n                    'container',\n                    options\n                ]),\n                ' || fn;'\n            ]);\n        },\n        invokeHelper: function (paramSize, name, isSimple) {\n            let nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name);\n            let possibleFunctionCalls = [];\n            if (isSimple) {\n                possibleFunctionCalls.push(helper.name);\n            }\n            possibleFunctionCalls.push(nonHelper);\n            if (!this.options.strict) {\n                possibleFunctionCalls.push(this.aliasable('container.hooks.helperMissing'));\n            }\n            let functionLookupCode = [\n                '(',\n                this.itemsSeparatedBy(possibleFunctionCalls, '||'),\n                ')'\n            ];\n            let functionCall = this.source.functionCall(functionLookupCode, 'call', helper.callParams);\n            this.push(functionCall);\n        },\n        itemsSeparatedBy: function (items, separator) {\n            let result = [];\n            result.push(items[0]);\n            for (let i = 1; i < items.length; i++) {\n                result.push(separator, items[i]);\n            }\n            return result;\n        },\n        invokeKnownHelper: function (paramSize, name) {\n            let helper = this.setupHelper(paramSize, name);\n            this.push(this.source.functionCall(helper.name, 'call', helper.callParams));\n        },\n        invokeAmbiguous: function (name, helperCall) {\n            this.useRegister('helper');\n            let nonHelper = this.popStack();\n            this.emptyHash();\n            let helper = this.setupHelper(0, name, helperCall);\n            let helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');\n            let lookup = [\n                '(',\n                '(helper = ',\n                helperName,\n                ' || ',\n                nonHelper,\n                ')'\n            ];\n            if (!this.options.strict) {\n                lookup[0] = '(helper = ';\n                lookup.push(' != null ? helper : ', this.aliasable('container.hooks.helperMissing'));\n            }\n            this.push([\n                '(',\n                lookup,\n                helper.paramsInit ? [\n                    '),(',\n                    helper.paramsInit\n                ] : [],\n                '),',\n                '(typeof helper === ',\n                this.aliasable('\"function\"'),\n                ' ? ',\n                this.source.functionCall('helper', 'call', helper.callParams),\n                ' : helper))'\n            ]);\n        },\n        invokePartial: function (isDynamic, name, indent) {\n            let params = [], options = this.setupParams(name, 1, params);\n            if (isDynamic) {\n                name = this.popStack();\n                delete options.name;\n            }\n            if (indent) {\n                options.indent = JSON.stringify(indent);\n            }\n            options.helpers = 'helpers';\n            options.partials = 'partials';\n            options.decorators = 'container.decorators';\n            if (!isDynamic) {\n                params.unshift(this.nameLookup('partials', name, 'partial'));\n            } else {\n                params.unshift(name);\n            }\n            if (this.options.compat) {\n                options.depths = 'depths';\n            }\n            options = this.objectLiteral(options);\n            params.push(options);\n            this.push(this.source.functionCall('container.invokePartial', '', params));\n        },\n        assignToHash: function (key) {\n            let value = this.popStack(), context, type, id;\n            if (this.trackIds) {\n                id = this.popStack();\n            }\n            if (this.stringParams) {\n                type = this.popStack();\n                context = this.popStack();\n            }\n            let hash = this.hash;\n            if (context) {\n                hash.contexts[key] = context;\n            }\n            if (type) {\n                hash.types[key] = type;\n            }\n            if (id) {\n                hash.ids[key] = id;\n            }\n            hash.values[key] = value;\n        },\n        pushId: function (type, name, child) {\n            if (type === 'BlockParam') {\n                this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));\n            } else if (type === 'PathExpression') {\n                this.pushString(name);\n            } else if (type === 'SubExpression') {\n                this.pushStackLiteral('true');\n            } else {\n                this.pushStackLiteral('null');\n            }\n        },\n        compiler: JavaScriptCompiler,\n        compileChildren: function (environment, options) {\n            let children = environment.children, child, compiler;\n            for (let i = 0, l = children.length; i < l; i++) {\n                child = children[i];\n                compiler = new this.compiler();\n                let existing = this.matchExistingProgram(child);\n                if (existing == null) {\n                    this.context.programs.push('');\n                    let index = this.context.programs.length;\n                    child.index = index;\n                    child.name = 'program' + index;\n                    this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);\n                    this.context.decorators[index] = compiler.decorators;\n                    this.context.environments[index] = child;\n                    this.useDepths = this.useDepths || compiler.useDepths;\n                    this.useBlockParams = this.useBlockParams || compiler.useBlockParams;\n                    child.useDepths = this.useDepths;\n                    child.useBlockParams = this.useBlockParams;\n                } else {\n                    child.index = existing.index;\n                    child.name = 'program' + existing.index;\n                    this.useDepths = this.useDepths || existing.useDepths;\n                    this.useBlockParams = this.useBlockParams || existing.useBlockParams;\n                }\n            }\n        },\n        matchExistingProgram: function (child) {\n            for (let i = 0, len = this.context.environments.length; i < len; i++) {\n                let environment = this.context.environments[i];\n                if (environment && environment.equals(child)) {\n                    return environment;\n                }\n            }\n        },\n        programExpression: function (guid) {\n            let child = this.environment.children[guid], programParams = [\n                    child.index,\n                    'data',\n                    child.blockParams\n                ];\n            if (this.useBlockParams || this.useDepths) {\n                programParams.push('blockParams');\n            }\n            if (this.useDepths) {\n                programParams.push('depths');\n            }\n            return 'container.program(' + programParams.join(', ') + ')';\n        },\n        useRegister: function (name) {\n            if (!this.registers[name]) {\n                this.registers[name] = true;\n                this.registers.list.push(name);\n            }\n        },\n        push: function (expr) {\n            if (!(expr instanceof Literal)) {\n                expr = this.source.wrap(expr);\n            }\n            this.inlineStack.push(expr);\n            return expr;\n        },\n        pushStackLiteral: function (item) {\n            this.push(new Literal(item));\n        },\n        pushSource: function (source) {\n            if (this.pendingContent) {\n                this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));\n                this.pendingContent = undefined;\n            }\n            if (source) {\n                this.source.push(source);\n            }\n        },\n        replaceStack: function (callback) {\n            let prefix = ['('], stack, createdStack, usedLiteral;\n            if (!this.isInline()) {\n                throw new Exception('replaceStack on non-inline');\n            }\n            let top = this.popStack(true);\n            if (top instanceof Literal) {\n                stack = [top.value];\n                prefix = [\n                    '(',\n                    stack\n                ];\n                usedLiteral = true;\n            } else {\n                createdStack = true;\n                let name = this.incrStack();\n                prefix = [\n                    '((',\n                    this.push(name),\n                    ' = ',\n                    top,\n                    ')'\n                ];\n                stack = this.topStack();\n            }\n            let item = callback.call(this, stack);\n            if (!usedLiteral) {\n                this.popStack();\n            }\n            if (createdStack) {\n                this.stackSlot--;\n            }\n            this.push(prefix.concat(item, ')'));\n        },\n        incrStack: function () {\n            this.stackSlot++;\n            if (this.stackSlot > this.stackVars.length) {\n                this.stackVars.push('stack' + this.stackSlot);\n            }\n            return this.topStackName();\n        },\n        topStackName: function () {\n            return 'stack' + this.stackSlot;\n        },\n        flushInline: function () {\n            let inlineStack = this.inlineStack;\n            this.inlineStack = [];\n            for (let i = 0, len = inlineStack.length; i < len; i++) {\n                let entry = inlineStack[i];\n                if (entry instanceof Literal) {\n                    this.compileStack.push(entry);\n                } else {\n                    let stack = this.incrStack();\n                    this.pushSource([\n                        stack,\n                        ' = ',\n                        entry,\n                        ';'\n                    ]);\n                    this.compileStack.push(stack);\n                }\n            }\n        },\n        isInline: function () {\n            return this.inlineStack.length;\n        },\n        popStack: function (wrapped) {\n            let inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();\n            if (!wrapped && item instanceof Literal) {\n                return item.value;\n            } else {\n                if (!inline) {\n                    if (!this.stackSlot) {\n                        throw new Exception('Invalid stack pop');\n                    }\n                    this.stackSlot--;\n                }\n                return item;\n            }\n        },\n        topStack: function () {\n            let stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];\n            if (item instanceof Literal) {\n                return item.value;\n            } else {\n                return item;\n            }\n        },\n        contextName: function (context) {\n            if (this.useDepths && context) {\n                return 'depths[' + context + ']';\n            } else {\n                return 'depth' + context;\n            }\n        },\n        quotedString: function (str) {\n            return this.source.quotedString(str);\n        },\n        objectLiteral: function (obj) {\n            return this.source.objectLiteral(obj);\n        },\n        aliasable: function (name) {\n            let ret = this.aliases[name];\n            if (ret) {\n                ret.referenceCount++;\n                return ret;\n            }\n            ret = this.aliases[name] = this.source.wrap(name);\n            ret.aliasable = true;\n            ret.referenceCount = 1;\n            return ret;\n        },\n        setupHelper: function (paramSize, name, blockHelper) {\n            let params = [], paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);\n            let foundHelper = this.nameLookup('helpers', name, 'helper'), callContext = this.aliasable(`${ this.contextName(0) } != null ? ${ this.contextName(0) } : (container.nullContext || {})`);\n            return {\n                params: params,\n                paramsInit: paramsInit,\n                name: foundHelper,\n                callParams: [callContext].concat(params)\n            };\n        },\n        setupParams: function (helper, paramSize, params) {\n            let options = {}, contexts = [], types = [], ids = [], objectArgs = !params, param;\n            if (objectArgs) {\n                params = [];\n            }\n            options.name = this.quotedString(helper);\n            options.hash = this.popStack();\n            if (this.trackIds) {\n                options.hashIds = this.popStack();\n            }\n            if (this.stringParams) {\n                options.hashTypes = this.popStack();\n                options.hashContexts = this.popStack();\n            }\n            let inverse = this.popStack(), program = this.popStack();\n            if (program || inverse) {\n                options.fn = program || 'container.noop';\n                options.inverse = inverse || 'container.noop';\n            }\n            let i = paramSize;\n            while (i--) {\n                param = this.popStack();\n                params[i] = param;\n                if (this.trackIds) {\n                    ids[i] = this.popStack();\n                }\n                if (this.stringParams) {\n                    types[i] = this.popStack();\n                    contexts[i] = this.popStack();\n                }\n            }\n            if (objectArgs) {\n                options.args = this.source.generateArray(params);\n            }\n            if (this.trackIds) {\n                options.ids = this.source.generateArray(ids);\n            }\n            if (this.stringParams) {\n                options.types = this.source.generateArray(types);\n                options.contexts = this.source.generateArray(contexts);\n            }\n            if (this.options.data) {\n                options.data = 'data';\n            }\n            if (this.useBlockParams) {\n                options.blockParams = 'blockParams';\n            }\n            return options;\n        },\n        setupHelperArgs: function (helper, paramSize, params, useRegister) {\n            let options = this.setupParams(helper, paramSize, params);\n            options.loc = JSON.stringify(this.source.currentLocation);\n            options = this.objectLiteral(options);\n            if (useRegister) {\n                this.useRegister('options');\n                params.push('options');\n                return [\n                    'options=',\n                    options\n                ];\n            } else if (params) {\n                params.push(options);\n                return '';\n            } else {\n                return options;\n            }\n        }\n    };\n    (function () {\n        const reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');\n        const compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};\n        for (let i = 0, l = reservedWords.length; i < l; i++) {\n            compilerWords[reservedWords[i]] = true;\n        }\n    }());\n    JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {\n        return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);\n    };\n    function strictLookup(requireTerminal, compiler, parts, type) {\n        let stack = compiler.popStack(), i = 0, len = parts.length;\n        if (requireTerminal) {\n            len--;\n        }\n        for (; i < len; i++) {\n            stack = compiler.nameLookup(stack, parts[i], type);\n        }\n        if (requireTerminal) {\n            return [\n                compiler.aliasable('container.strict'),\n                '(',\n                stack,\n                ', ',\n                compiler.quotedString(parts[i]),\n                ', ',\n                JSON.stringify(compiler.source.currentLocation),\n                ' )'\n            ];\n        } else {\n            return stack;\n        }\n    }\n    return JavaScriptCompiler;\n});"]}