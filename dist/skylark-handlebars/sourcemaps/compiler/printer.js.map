{"version":3,"sources":["compiler/printer.js"],"names":["define","Visitor","PrintVisitor","this","padding","prototype","pad","string","out","i","l","Program","program","body","blockParams","length","accept","MustacheStatement","mustache","SubExpression","Decorator","BlockStatement","DecoratorBlock","block","type","inverse","PartialStatement","partial","content","name","original","params","hash","PartialBlockStatement","ContentStatement","value","CommentStatement","comment","sexpr","paramStrings","push","join","path","PathExpression","id","parts","data","StringLiteral","NumberLiteral","number","BooleanLiteral","bool","UndefinedLiteral","NullLiteral","Hash","pairs","joinedPairs","HashPair","pair","key","print","ast"],"mappings":"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","file":"../../compiler/printer.js","sourcesContent":["define(['./visitor'], function (Visitor) {\n    'use strict';\n    function print(ast) {\n        return new PrintVisitor().accept(ast);\n    }\n    function PrintVisitor() {\n        this.padding = 0;\n    }\n    PrintVisitor.prototype = new Visitor();\n    PrintVisitor.prototype.pad = function (string) {\n        let out = '';\n        for (let i = 0, l = this.padding; i < l; i++) {\n            out += '  ';\n        }\n        out += string + '\\n';\n        return out;\n    };\n    PrintVisitor.prototype.Program = function (program) {\n        let out = '', body = program.body, i, l;\n        if (program.blockParams) {\n            let blockParams = 'BLOCK PARAMS: [';\n            for (i = 0, l = program.blockParams.length; i < l; i++) {\n                blockParams += ' ' + program.blockParams[i];\n            }\n            blockParams += ' ]';\n            out += this.pad(blockParams);\n        }\n        for (i = 0, l = body.length; i < l; i++) {\n            out += this.accept(body[i]);\n        }\n        this.padding--;\n        return out;\n    };\n    PrintVisitor.prototype.MustacheStatement = function (mustache) {\n        return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');\n    };\n    PrintVisitor.prototype.Decorator = function (mustache) {\n        return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');\n    };\n    PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {\n        let out = '';\n        out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');\n        this.padding++;\n        out += this.pad(this.SubExpression(block));\n        if (block.program) {\n            out += this.pad('PROGRAM:');\n            this.padding++;\n            out += this.accept(block.program);\n            this.padding--;\n        }\n        if (block.inverse) {\n            if (block.program) {\n                this.padding++;\n            }\n            out += this.pad('{{^}}');\n            this.padding++;\n            out += this.accept(block.inverse);\n            this.padding--;\n            if (block.program) {\n                this.padding--;\n            }\n        }\n        this.padding--;\n        return out;\n    };\n    PrintVisitor.prototype.PartialStatement = function (partial) {\n        let content = 'PARTIAL:' + partial.name.original;\n        if (partial.params[0]) {\n            content += ' ' + this.accept(partial.params[0]);\n        }\n        if (partial.hash) {\n            content += ' ' + this.accept(partial.hash);\n        }\n        return this.pad('{{> ' + content + ' }}');\n    };\n    PrintVisitor.prototype.PartialBlockStatement = function (partial) {\n        let content = 'PARTIAL BLOCK:' + partial.name.original;\n        if (partial.params[0]) {\n            content += ' ' + this.accept(partial.params[0]);\n        }\n        if (partial.hash) {\n            content += ' ' + this.accept(partial.hash);\n        }\n        content += ' ' + this.pad('PROGRAM:');\n        this.padding++;\n        content += this.accept(partial.program);\n        this.padding--;\n        return this.pad('{{> ' + content + ' }}');\n    };\n    PrintVisitor.prototype.ContentStatement = function (content) {\n        return this.pad(\"CONTENT[ '\" + content.value + \"' ]\");\n    };\n    PrintVisitor.prototype.CommentStatement = function (comment) {\n        return this.pad(\"{{! '\" + comment.value + \"' }}\");\n    };\n    PrintVisitor.prototype.SubExpression = function (sexpr) {\n        let params = sexpr.params, paramStrings = [], hash;\n        for (let i = 0, l = params.length; i < l; i++) {\n            paramStrings.push(this.accept(params[i]));\n        }\n        params = '[' + paramStrings.join(', ') + ']';\n        hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';\n        return this.accept(sexpr.path) + ' ' + params + hash;\n    };\n    PrintVisitor.prototype.PathExpression = function (id) {\n        let path = id.parts.join('/');\n        return (id.data ? '@' : '') + 'PATH:' + path;\n    };\n    PrintVisitor.prototype.StringLiteral = function (string) {\n        return '\"' + string.value + '\"';\n    };\n    PrintVisitor.prototype.NumberLiteral = function (number) {\n        return 'NUMBER{' + number.value + '}';\n    };\n    PrintVisitor.prototype.BooleanLiteral = function (bool) {\n        return 'BOOLEAN{' + bool.value + '}';\n    };\n    PrintVisitor.prototype.UndefinedLiteral = function () {\n        return 'UNDEFINED';\n    };\n    PrintVisitor.prototype.NullLiteral = function () {\n        return 'NULL';\n    };\n    PrintVisitor.prototype.Hash = function (hash) {\n        let pairs = hash.pairs, joinedPairs = [];\n        for (let i = 0, l = pairs.length; i < l; i++) {\n            joinedPairs.push(this.accept(pairs[i]));\n        }\n        return 'HASH{' + joinedPairs.join(', ') + '}';\n    };\n    PrintVisitor.prototype.HashPair = function (pair) {\n        return pair.key + '=' + this.accept(pair.value);\n    };\n    return {\n        print: print,\n        PrintVisitor: PrintVisitor\n    };\n});"]}