{"version":3,"sources":["compiler/visitor.js"],"names":["define","Exception","Visitor","this","parents","visitSubExpression","mustache","acceptRequired","acceptArray","params","acceptKey","visitBlock","block","call","visitPartial","partial","prototype","constructor","mutating","node","name","value","accept","type","array","i","l","length","splice","object","current","unshift","ret","shift","Program","program","body","MustacheStatement","Decorator","BlockStatement","DecoratorBlock","PartialStatement","PartialBlockStatement","ContentStatement","CommentStatement","SubExpression","PathExpression","StringLiteral","NumberLiteral","BooleanLiteral","UndefinedLiteral","NullLiteral","Hash","hash","pairs","HashPair","pair"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAiB,SAAUC,GAC/B,aACA,SAASC,IACLC,KAAKC,WAqFT,SAASC,EAAmBC,GACxBH,KAAKI,eAAeD,EAAU,QAC9BH,KAAKK,YAAYF,EAASG,QAC1BN,KAAKO,UAAUJ,EAAU,QAE7B,SAASK,EAAWC,GAChBP,EAAmBQ,KAAKV,KAAMS,GAC9BT,KAAKO,UAAUE,EAAO,WACtBT,KAAKO,UAAUE,EAAO,WAE1B,SAASE,EAAaC,GAClBZ,KAAKI,eAAeQ,EAAS,QAC7BZ,KAAKK,YAAYO,EAAQN,QACzBN,KAAKO,UAAUK,EAAS,QAE5B,OAlGAb,EAAQc,WACJC,YAAaf,EACbgB,UAAU,EACVR,UAAW,SAAUS,EAAMC,GACvB,IAAIC,EAAQlB,KAAKmB,OAAOH,EAAKC,IAC7B,GAAIjB,KAAKe,SAAU,CACf,GAAIG,IAAUnB,EAAQc,UAAUK,EAAME,MAClC,MAAM,IAAItB,EAAU,yBAA2BoB,EAAME,KAAO,0BAA4BH,EAAO,OAASD,EAAKI,MAEjHJ,EAAKC,GAAQC,IAGrBd,eAAgB,SAAUY,EAAMC,GAE5B,GADAjB,KAAKO,UAAUS,EAAMC,IAChBD,EAAKC,GACN,MAAM,IAAInB,EAAUkB,EAAKI,KAAO,aAAeH,IAGvDZ,YAAa,SAAUgB,GACnB,IAAK,IAAIC,EAAI,EAAGC,EAAIF,EAAMG,OAAQF,EAAIC,EAAGD,IACrCtB,KAAKO,UAAUc,EAAOC,GACjBD,EAAMC,KACPD,EAAMI,OAAOH,EAAG,GAChBA,IACAC,MAIZJ,OAAQ,SAAUO,GACd,IAAKA,EACD,OAEJ,IAAK1B,KAAK0B,EAAON,MACb,MAAM,IAAItB,EAAU,iBAAmB4B,EAAON,KAAMM,GAEpD1B,KAAK2B,SACL3B,KAAKC,QAAQ2B,QAAQ5B,KAAK2B,SAE9B3B,KAAK2B,QAAUD,EACf,IAAIG,EAAM7B,KAAK0B,EAAON,MAAMM,GAE5B,OADA1B,KAAK2B,QAAU3B,KAAKC,QAAQ6B,SACvB9B,KAAKe,UAAYc,EACXA,GACQ,IAARA,EACAH,OADJ,GAIXK,QAAS,SAAUC,GACfhC,KAAKK,YAAY2B,EAAQC,OAE7BC,kBAAmBhC,EACnBiC,UAAWjC,EACXkC,eAAgB5B,EAChB6B,eAAgB7B,EAChB8B,iBAAkB3B,EAClB4B,sBAAuB,SAAU3B,GAC7BD,EAAaD,KAAKV,KAAMY,GACxBZ,KAAKO,UAAUK,EAAS,YAE5B4B,iBAAkB,aAElBC,iBAAkB,aAElBC,cAAexC,EACfyC,eAAgB,aAEhBC,cAAe,aAEfC,cAAe,aAEfC,eAAgB,aAEhBC,iBAAkB,aAElBC,YAAa,aAEbC,KAAM,SAAUC,GACZlD,KAAKK,YAAY6C,EAAKC,QAE1BC,SAAU,SAAUC,GAChBrD,KAAKI,eAAeiD,EAAM,WAkB3BtD","file":"../../compiler/visitor.js","sourcesContent":["define(['../exception'], function (Exception) {\n    'use strict';\n    function Visitor() {\n        this.parents = [];\n    }\n    Visitor.prototype = {\n        constructor: Visitor,\n        mutating: false,\n        acceptKey: function (node, name) {\n            let value = this.accept(node[name]);\n            if (this.mutating) {\n                if (value && !Visitor.prototype[value.type]) {\n                    throw new Exception('Unexpected node type \"' + value.type + '\" found when accepting ' + name + ' on ' + node.type);\n                }\n                node[name] = value;\n            }\n        },\n        acceptRequired: function (node, name) {\n            this.acceptKey(node, name);\n            if (!node[name]) {\n                throw new Exception(node.type + ' requires ' + name);\n            }\n        },\n        acceptArray: function (array) {\n            for (let i = 0, l = array.length; i < l; i++) {\n                this.acceptKey(array, i);\n                if (!array[i]) {\n                    array.splice(i, 1);\n                    i--;\n                    l--;\n                }\n            }\n        },\n        accept: function (object) {\n            if (!object) {\n                return;\n            }\n            if (!this[object.type]) {\n                throw new Exception('Unknown type: ' + object.type, object);\n            }\n            if (this.current) {\n                this.parents.unshift(this.current);\n            }\n            this.current = object;\n            let ret = this[object.type](object);\n            this.current = this.parents.shift();\n            if (!this.mutating || ret) {\n                return ret;\n            } else if (ret !== false) {\n                return object;\n            }\n        },\n        Program: function (program) {\n            this.acceptArray(program.body);\n        },\n        MustacheStatement: visitSubExpression,\n        Decorator: visitSubExpression,\n        BlockStatement: visitBlock,\n        DecoratorBlock: visitBlock,\n        PartialStatement: visitPartial,\n        PartialBlockStatement: function (partial) {\n            visitPartial.call(this, partial);\n            this.acceptKey(partial, 'program');\n        },\n        ContentStatement: function () {\n        },\n        CommentStatement: function () {\n        },\n        SubExpression: visitSubExpression,\n        PathExpression: function () {\n        },\n        StringLiteral: function () {\n        },\n        NumberLiteral: function () {\n        },\n        BooleanLiteral: function () {\n        },\n        UndefinedLiteral: function () {\n        },\n        NullLiteral: function () {\n        },\n        Hash: function (hash) {\n            this.acceptArray(hash.pairs);\n        },\n        HashPair: function (pair) {\n            this.acceptRequired(pair, 'value');\n        }\n    };\n    function visitSubExpression(mustache) {\n        this.acceptRequired(mustache, 'path');\n        this.acceptArray(mustache.params);\n        this.acceptKey(mustache, 'hash');\n    }\n    function visitBlock(block) {\n        visitSubExpression.call(this, block);\n        this.acceptKey(block, 'program');\n        this.acceptKey(block, 'inverse');\n    }\n    function visitPartial(partial) {\n        this.acceptRequired(partial, 'name');\n        this.acceptArray(partial.params);\n        this.acceptKey(partial, 'hash');\n    }\n    return Visitor;\n});"]}