{"version":3,"sources":["logger.js"],"names":["define","utils","logger","methodMap","level","lookupLevel","levelMap","indexOf","toLowerCase","parseInt","log","message","console","method"],"mappings":";;;;;;;AAAAA,QAAQ,WAAY,SAAUC,GAC1B,aACA,IAAIC,GACAC,WACI,QACA,OACA,OACA,SAEJC,MAAO,OACPC,YAAa,SAAUD,GACnB,GAAqB,iBAAVA,EAAoB,CAC3B,IAAIE,EAAWL,EAAMM,QAAQL,EAAOC,UAAWC,EAAMI,eAEjDJ,EADAE,GAAY,EACJA,EAEAG,SAASL,EAAO,IAGhC,OAAOA,GAEXM,IAAK,SAAUN,KAAUO,GAErB,GADAP,EAAQF,EAAOG,YAAYD,GACJ,oBAAZQ,SAA2BV,EAAOG,YAAYH,EAAOE,QAAUA,EAAO,CAC7E,IAAIS,EAASX,EAAOC,UAAUC,GACzBQ,QAAQC,KACTA,EAAS,OAEbD,QAAQC,MAAWF,MAI/B,OAAOT","file":"../logger.js","sourcesContent":["define(['./utils'], function (utils) {\n    'use strict';\n    let logger = {\n        methodMap: [\n            'debug',\n            'info',\n            'warn',\n            'error'\n        ],\n        level: 'info',\n        lookupLevel: function (level) {\n            if (typeof level === 'string') {\n                let levelMap = utils.indexOf(logger.methodMap, level.toLowerCase());\n                if (levelMap >= 0) {\n                    level = levelMap;\n                } else {\n                    level = parseInt(level, 10);\n                }\n            }\n            return level;\n        },\n        log: function (level, ...message) {\n            level = logger.lookupLevel(level);\n            if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n                let method = logger.methodMap[level];\n                if (!console[method]) {\n                    method = 'log';\n                }\n                console[method](...message);\n            }\n        }\n    };\n    return logger;\n});"]}