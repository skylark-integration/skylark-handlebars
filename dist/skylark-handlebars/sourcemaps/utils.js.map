{"version":3,"sources":["utils.js"],"names":["define","escape","&","<",">","\"","'","`","=","badChars","possible","escapeChar","chr","extend","obj","i","arguments","length","key","Object","prototype","hasOwnProperty","call","toString","isFunction","value","isArray","Array","indexOf","array","len","escapeExpression","string","toHTML","test","replace","isEmpty","createFrame","object","frame","_parent","blockParams","params","ids","path","appendContextPath","contextPath","id"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,GACFC,IAAK,QACLC,IAAK,OACLC,IAAK,OACLC,IAAK,SACLC,IAAK,SACLC,IAAK,SACLC,IAAK,UAEHC,EAAW,aAAcC,EAAW,YAC1C,SAASC,EAAWC,GAChB,OAAOX,EAAOW,GAElB,SAASC,EAAOC,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAClC,IAAK,IAAIG,KAAOF,UAAUD,GAClBI,OAAOC,UAAUC,eAAeC,KAAKN,UAAUD,GAAIG,KACnDJ,EAAII,GAAOF,UAAUD,GAAGG,IAIpC,OAAOJ,EAEX,IAAIS,EAAWJ,OAAOC,UAAUG,SAC5BC,EAAa,SAAUC,GACvB,MAAwB,mBAAVA,GAEdD,EAAW,OACXA,EAAa,SAAUC,GACnB,MAAwB,mBAAVA,GAAiD,sBAAzBF,EAASD,KAAKG,KAG5D,MAAMC,EAAUC,MAAMD,SAAW,SAAUD,GACvC,SAAOA,GAA0B,iBAAVA,IAA8C,mBAAzBF,EAASD,KAAKG,IA+C9D,OACIZ,OAAQA,EACRU,SAAUA,EACVC,WAAAA,EACAE,QAASA,EACTE,QAlDJ,SAAiBC,EAAOJ,GACpB,IAAK,IAAIV,EAAI,EAAGe,EAAMD,EAAMZ,OAAQF,EAAIe,EAAKf,IACzC,GAAIc,EAAMd,KAAOU,EACb,OAAOV,EAGf,OAAQ,GA6CRgB,iBA3CJ,SAA0BC,GACtB,GAAsB,iBAAXA,EAAqB,CAC5B,GAAIA,GAAUA,EAAOC,OACjB,OAAOD,EAAOC,SACX,GAAc,MAAVD,EACP,MAAO,GACJ,IAAKA,EACR,OAAOA,EAAS,GAEpBA,EAAS,GAAKA,EAElB,OAAKtB,EAASwB,KAAKF,GAGZA,EAAOG,QAAQ1B,EAAUE,GAFrBqB,GAgCXI,QA5BJ,SAAiBX,GACb,OAAKA,GAAmB,IAAVA,MAEHC,EAAQD,IAA2B,IAAjBA,EAAMR,SA0BnCoB,YApBJ,SAAqBC,GACjB,IAAIC,EAAQ1B,KAAWyB,GAEvB,OADAC,EAAMC,QAAUF,EACTC,GAkBPE,YAhBJ,SAAqBC,EAAQC,GAEzB,OADAD,EAAOE,KAAOD,EACPD,GAePG,kBAbJ,SAA2BC,EAAaC,GACpC,OAAQD,EAAcA,EAAc,IAAM,IAAMC","file":"../utils.js","sourcesContent":["define(function () {\n    'use strict';\n    const escape = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '`': '&#x60;',\n        '=': '&#x3D;'\n    };\n    const badChars = /[&<>\"'`=]/g, possible = /[&<>\"'`=]/;\n    function escapeChar(chr) {\n        return escape[chr];\n    }\n    function extend(obj) {\n        for (let i = 1; i < arguments.length; i++) {\n            for (let key in arguments[i]) {\n                if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n                    obj[key] = arguments[i][key];\n                }\n            }\n        }\n        return obj;\n    }\n    let toString = Object.prototype.toString;\n    let isFunction = function (value) {\n        return typeof value === 'function';\n    };\n    if (isFunction(/x/)) {\n        isFunction = function (value) {\n            return typeof value === 'function' && toString.call(value) === '[object Function]';\n        };\n    }\n    const isArray = Array.isArray || function (value) {\n        return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;\n    };\n    function indexOf(array, value) {\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (array[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function escapeExpression(string) {\n        if (typeof string !== 'string') {\n            if (string && string.toHTML) {\n                return string.toHTML();\n            } else if (string == null) {\n                return '';\n            } else if (!string) {\n                return string + '';\n            }\n            string = '' + string;\n        }\n        if (!possible.test(string)) {\n            return string;\n        }\n        return string.replace(badChars, escapeChar);\n    }\n    function isEmpty(value) {\n        if (!value && value !== 0) {\n            return true;\n        } else if (isArray(value) && value.length === 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function createFrame(object) {\n        let frame = extend({}, object);\n        frame._parent = object;\n        return frame;\n    }\n    function blockParams(params, ids) {\n        params.path = ids;\n        return params;\n    }\n    function appendContextPath(contextPath, id) {\n        return (contextPath ? contextPath + '.' : '') + id;\n    }\n    return {\n        extend: extend,\n        toString: toString,\n        isFunction,\n        isArray: isArray,\n        indexOf: indexOf,\n        escapeExpression: escapeExpression,\n        isEmpty: isEmpty,\n        createFrame: createFrame,\n        blockParams: blockParams,\n        appendContextPath: appendContextPath\n    };\n});"]}